<!DOCTYPE html>
<html lang="en">

<head>
  <title>Starter Notebook Guide | Kaggle</title>
  <meta charset="utf-8" />
  <meta name="robots" content="index, follow" />
  <meta name="description" content="Explore and run machine learning code with Kaggle Notebooks | Using data from EDSA Movie Recommendation Challenge" />
  <meta name="turbolinks-cache-control" content="no-cache" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=5.0, minimum-scale=1.0">
  <meta name="theme-color" content="#008ABC" />
  <script nonce="eoqD1q22zrBda2D17u9vBg==" type="text/javascript">
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.getRegistrations()
        .then(function (registrations) {
          for (let registration of registrations) {
            registration.unregister();
          }
        })
        .catch(function (err) {
          console.error("Service worker unregister failed: ", err);
        });
    }
  </script>
  <script nonce="eoqD1q22zrBda2D17u9vBg==" type="text/javascript">
    window["pageRequestStartTime"] = 1626162324096;
    window["pageRequestEndTime"] = 1626162324469;
    window["initialPageLoadStartTime"] = new Date().getTime();
  </script>
  <link rel="preconnect" href="https://www.google-analytics.com" crossorigin="anonymous" /><link rel="preconnect" href="https://stats.g.doubleclick.net" /><link rel="preconnect" href="https://storage.googleapis.com" /><link rel="preconnect" href="https://apis.google.com" />
  <link href="/static/images/favicon.ico" rel="shortcut icon" type="image/x-icon" />
  <link rel="manifest" href="/static/json/manifest.json" crossorigin="use-credentials">


  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  <link href="https://fonts.googleapis.com/icon?family=Google+Material+Icons"
    rel="preload" as="style" />
  <link href="https://fonts.googleapis.com/icon?family=Google+Material+Icons"
    rel="stylesheet" media="print" id="async-google-font" />
  <script nonce="eoqD1q22zrBda2D17u9vBg==" type="text/javascript">
    document.getElementById("async-google-font").addEventListener("load", function() {
      this.media = "all";
    });
  </script>
  
    <link rel="canonical" href="/exploredatascience/starter-notebook-guide" />
    <link rel="stylesheet" type="text/css" href="/static/assets/vendor.css?v=82cb257701542c806dbc" />
    <link rel="stylesheet" type="text/css" href="/static/assets/app.css?v=d6ddd29cfc0dce0672c5" />
  
    
 
  
    <script nonce="eoqD1q22zrBda2D17u9vBg==">
        try{(function(a,s,y,n,c,h,i,d,e){d=s.createElement("style");
        d.appendChild(s.createTextNode(""));s.head.appendChild(d);d=d.sheet;
        y=y.map(x => d.insertRule(x + "{ opacity: 0 !important }"));
        h.start=1*new Date;h.end=i=function(){y.forEach(x => x<d.cssRules.length ? d.deleteRule(x) : {})};
        (a[n]=a[n]||[]).hide=h;setTimeout(function(){i();h.end=null},c);h.timeout=c;
        })(window,document,['.site-header-react__nav'],'dataLayer',2000,{'GTM-52LNT9S':true});}catch(ex){}
    </script>
    <script nonce="eoqD1q22zrBda2D17u9vBg==">
        window.dataLayer = window.dataLayer || [];
        function gtag() { dataLayer.push(arguments); }
        gtag('js', new Date());
        gtag('config', 'UA-12629138-1', {
            'optimize_id': 'GTM-52LNT9S',
            'displayFeaturesTask': null,
            'send_page_view': false,
            'content_group1': 'Notebooks'
        });
    </script>
    <script nonce="eoqD1q22zrBda2D17u9vBg==" async src="https://www.googletagmanager.com/gtag/js?id=UA-12629138-1"></script>

  
    
    <meta name="og:url" content="https://kaggle.com/exploredatascience/starter-notebook-guide" />
    <meta property="og:title" content="Starter Notebook Guide" />
    <meta property="og:description" content="Explore and run machine learning code with Kaggle Notebooks | Using data from EDSA Movie Recommendation Challenge" />
    <meta property="og:type" content="website" />
    <meta name="og:image" content="https://storage.googleapis.com/kaggle-avatars/thumbnails/2205222-kg.png" />

    <meta name="twitter:card" content="summary" />
    <meta name="twitter:site" content="@kaggledatasets" />


  <meta name="twitter:site" content="@Kaggle" /> 
  
    
    <script nonce="eoqD1q22zrBda2D17u9vBg==" type="application/ld+json">{"@context":"http://schema.org/","@type":"Article","author":{"@type":"Person","name":"exploredatascience","sameAs":"/exploredatascience"},"headline":"Starter Notebook Guide","url":"https://www.kaggle.com/exploredatascience/starter-notebook-guide","dateModified":"2021-06-14T11:19:37.77","datePublished":"2021-06-14T11:19:37.77","mainEntityOfPage":{"@type":"WebPage","@id":"https://www.kaggle.com/exploredatascience/starter-notebook-guide"},"publisher":{"@type":"Organization","name":"Kaggle","sameAs":"https://www.kaggle.com","logo":{"type":"ImageObject","url":"https://www.kaggle.com/static/images/site-logo.png"}},"image":["https://storage.googleapis.com/kaggle-avatars/thumbnails/2205222-kg.png"]}</script>


  
    
    
<script nonce="eoqD1q22zrBda2D17u9vBg==" type="text/javascript">
    var Kaggle = window.Kaggle || {};

    Kaggle.Current = {
        antiForgeryToken: 'CfDJ8LdUzqlsSWBPr4Ce3rb9VL-dCQRfH0RdowyejnuleKZpgtr-9qhGZ1sTg9EW3b2FJhZBsc7n1EEijT8iKkDNG13T3gCMwdy3dwIeGYUSLcA3BqhKCx_s-UWPe6sauSP7PeRIzW-PeAq9FBzIvzrrUx4',
        isAnonymous: true,
        analyticsToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MjYxNjMyMjQsIlVzZXJJZCI6MH0.xGq_wsDYO2lBzEDiFjvmnEOJyTolp09TNdFsjTjvrdQ',
        analyticsTokenExpiry: 15,
        
        
        
        
        
        
        
        enableRapidash: true, 
    }
        Kaggle.Current.log = function(){};
        Kaggle.Current.warn = function(){};

    var decodeUserDisplayName = function () {
        var escapedUserDisplayName = Kaggle.Current.userDisplayNameEscaped || "";
        try {
            var textVersion = new DOMParser().parseFromString(escapedUserDisplayName, "text/html").documentElement.textContent;
            if (textVersion) {
                return textVersion;
            }
        } catch(ex) {}
        return escapedUserDisplayName;
    }
    Kaggle.Current.userDisplayName = decodeUserDisplayName();
</script>

    

<script nonce="eoqD1q22zrBda2D17u9vBg==" type="text/javascript">
    var Kaggle = window.Kaggle || {};
    Kaggle.PageMessages = [];
</script>



    <script nonce="eoqD1q22zrBda2D17u9vBg==">window['useKaggleAnalytics'] = true;</script>

  <script id="gapi-target" nonce="eoqD1q22zrBda2D17u9vBg==" src="https://apis.google.com/js/api.js" defer
    async></script>
  <script nonce="eoqD1q22zrBda2D17u9vBg==" src="/static/assets/runtime.js?v=780785ae0b9dd7683538" data-turbolinks-track="reload"></script>
  <script nonce="eoqD1q22zrBda2D17u9vBg==" src="/static/assets/vendor.js?v=0673ad887ea5cfa36b8f" data-turbolinks-track="reload"></script>
  <script nonce="eoqD1q22zrBda2D17u9vBg==" src="/static/assets/app.js?v=4f8c9dcb0ba62f6d92b9" data-turbolinks-track="reload"></script>
    <script nonce="eoqD1q22zrBda2D17u9vBg==" type="text/javascript">
      window.kaggleStackdriverConfig = {
        key: 'AIzaSyA4eNqUdRRskJsCZWVz-qL655Xa5JEMreE',
        projectId: 'kaggle-161607',
        service: 'web-fe',
        version: 'ci',
          context: {
        user: '0',
                  },
              };
    </script>
</head>

<body data-turbolinks="false">
  <main>
    





<div id="site-container"></div>
<div data-component-name="NavigationContainer" style="display: flex; flex-direction: column; flex: 1 0 auto;"></div><script class="kaggle-component" nonce="eoqD1q22zrBda2D17u9vBg==">var Kaggle=window.Kaggle||{};Kaggle.State=Kaggle.State||[];Kaggle.State.push({"navigationType":"BOTH_NAV"});performance && performance.mark && performance.mark("NavigationContainer.componentCouldBootstrap");</script>
<div id="site-body" class="hide">
    



<div data-component-name="KernelViewer" style="display: flex; flex-direction: column; flex: 1 0 auto;"></div><script class="kaggle-component" nonce="eoqD1q22zrBda2D17u9vBg==">var Kaggle=window.Kaggle||{};Kaggle.State=Kaggle.State||[];Kaggle.State.push({"redirectUrl":null,"kernel":{"id":17441449,"title":"Starter Notebook Guide","forkParent":null,"currentRunId":65706985,"mostRecentRunId":65706985,"url":"/exploredatascience/starter-notebook-guide","tags":[{"name":"matplotlib","slug":"matplotlib","url":"/tags/matplotlib"},{"name":"pandas","slug":"pandas","url":"/tags/pandas"},{"name":"seaborn","slug":"seaborn","url":"/tags/seaborn"},{"name":"business","slug":"business","url":"/tags/business"}],"commentCount":0,"upvoteCount":25,"viewCount":786,"forkCount":96,"bestPublicScore":null,"author":{"id":2205222,"displayName":"Explore Data Science Academy","email":null,"editedEmail":null,"editedEmailCode":null,"userName":"exploredatascience","thumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/2205222-kg.png","profileUrl":"/exploredatascience","registerDate":"0001-01-01T00:00:00Z","lastVisitDate":"0001-01-01T00:00:00Z","statusId":0,"performanceTier":1,"grandfatheredCompetitionTier":null,"userLogins":null,"groupIds":null,"duplicateUsers":null,"hasPhoneVerifications":false,"failedNerdchas":0,"hasPendingNerdcha":false,"deleteRequests":null,"isAdmin":false,"isKaggleBot":false,"isAnonymous":false,"canAct":false,"canBeSeen":false,"thumbnailName":null,"isPhoneVerified":false},"isPrivate":false,"updatedTime":"2021-06-14T11:19:37.77Z","selfLink":"/kernels/17441449","pinnedDockerImageVersionId":null,"dockerImagePinningType":"original","originalDockerImageId":30096,"isLanguageTemplate":false,"medal":null,"topicId":null,"readGroupId":null,"writeGroupId":null,"slug":"starter-notebook-guide","hasUsedAccelerator":false,"pinnedSessionId":null,"disableComments":true,"hasLinkedSubmission":false,"currentUserHasBookmarked":false},"kernelBlob":{"id":659730609,"settings":{"dockerImageVersionId":null,"dataSources":[{"sourceType":"Competition","sourceId":27685,"datasetId":null,"databundleVersionId":null,"mountSlug":"edsa-movie-recommendation-challenge"}],"sourceType":"notebook","language":"python","accelerator":"none","isInternetEnabled":false},"source":"{\u0022metadata\u0022:{\u0022kernelspec\u0022:{\u0022language\u0022:\u0022python\u0022,\u0022display_name\u0022:\u0022Python 3\u0022,\u0022name\u0022:\u0022python3\u0022},\u0022language_info\u0022:{\u0022pygments_lexer\u0022:\u0022ipython3\u0022,\u0022nbconvert_exporter\u0022:\u0022python\u0022,\u0022version\u0022:\u00223.6.4\u0022,\u0022file_extension\u0022:\u0022.py\u0022,\u0022codemirror_mode\u0022:{\u0022name\u0022:\u0022ipython\u0022,\u0022version\u0022:3},\u0022name\u0022:\u0022python\u0022,\u0022mimetype\u0022:\u0022text/x-python\u0022}},\u0022nbformat_minor\u0022:4,\u0022nbformat\u0022:4,\u0022cells\u0022:[{\u0022cell_type\u0022:\u0022markdown\u0022,\u0022source\u0022:\u0022# Introduction\\n\\nThe followig aims to get you up and running with the predict. Make a copy of the notebook and run all cells. We will also show you how to get your submission file from kaggle. \u0022,\u0022metadata\u0022:{}},{\u0022cell_type\u0022:\u0022code\u0022,\u0022source\u0022:\u0022# This Python 3 environment comes with many helpful analytics libraries installed\\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\\n# For example, here\u0027s several helpful packages to load\\n\\nimport numpy as np # linear algebra\\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\\n\\n# Input data files are available in the read-only \\\u0022../input/\\\u0022 directory\\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\\n\\nimport os\\nfor dirname, _, filenames in os.walk(\u0027/kaggle/input\u0027):\\n    for filename in filenames:\\n        print(os.path.join(dirname, filename))\\n\\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \\\u0022Save \u0026 Run All\\\u0022 \\n# You can also write temporary files to /kaggle/temp/, but they won\u0027t be saved outside of the current session\u0022,\u0022metadata\u0022:{\u0022_uuid\u0022:\u00228f2839f25d086af736a60e9eeb907d3b93b6e0e5\u0022,\u0022_cell_guid\u0022:\u0022b1076dfc-b9ad-4769-8c92-a6c4dae69d19\u0022,\u0022execution\u0022:{\u0022iopub.status.busy\u0022:\u00222021-06-14T11:18:06.29795Z\u0022,\u0022iopub.execute_input\u0022:\u00222021-06-14T11:18:06.298449Z\u0022,\u0022iopub.status.idle\u0022:\u00222021-06-14T11:18:06.313041Z\u0022,\u0022shell.execute_reply.started\u0022:\u00222021-06-14T11:18:06.298343Z\u0022,\u0022shell.execute_reply\u0022:\u00222021-06-14T11:18:06.311996Z\u0022},\u0022trusted\u0022:true},\u0022execution_count\u0022:null,\u0022outputs\u0022:[]},{\u0022cell_type\u0022:\u0022markdown\u0022,\u0022source\u0022:\u0022## Installing packages\\nPlease download all relevant packages in. There is no terminal so you will pip install everything.\\n\\nYou can find a list of recommended install from the Intro to Recommender sysytem notebook.\u0022,\u0022metadata\u0022:{}},{\u0022cell_type\u0022:\u0022code\u0022,\u0022source\u0022:\u0022# Install packages here\\n# Packages for data processing\\nimport numpy as np\\nimport pandas as pd\\nimport datetime\\nfrom sklearn import preprocessing\\nfrom sklearn.datasets import make_blobs\\nfrom sklearn.preprocessing import StandardScaler\\nfrom sklearn.feature_extraction.text import TfidfVectorizer\\nfrom sklearn.metrics.pairwise import cosine_similarity\\nimport re\\nfrom scipy.sparse import csr_matrix\\nimport scipy as sp\\n\\n\\n# Packages for visualization\\nimport matplotlib.pyplot as plt\\nimport seaborn as sns\\n%matplotlib inline\\n\\n# Packages for modeling\\nfrom surprise import Reader\\nfrom surprise import Dataset\\nfrom surprise import KNNWithMeans\\nfrom surprise import KNNBasic\\nfrom surprise.model_selection import cross_validate\\nfrom surprise.model_selection import GridSearchCV\\nfrom surprise import SVD\\nfrom surprise import SVDpp\\nfrom surprise import NMF\\nfrom surprise import SlopeOne\\nfrom surprise import CoClustering\\nimport heapq\\n\\n# Packages for model evaluation\\nfrom sklearn.metrics import mean_squared_error\\nfrom sklearn.metrics import mean_absolute_error\\nfrom time import time\\n\\n# Package to suppress warnings\\nimport warnings\\nwarnings.filterwarnings(\\\u0022ignore\\\u0022)\\n\\n# Packages for saving models\\nimport pickle\u0022,\u0022metadata\u0022:{\u0022execution\u0022:{\u0022iopub.status.busy\u0022:\u00222021-06-06T09:45:12.505806Z\u0022,\u0022iopub.execute_input\u0022:\u00222021-06-06T09:45:12.506211Z\u0022,\u0022iopub.status.idle\u0022:\u00222021-06-06T09:45:12.519781Z\u0022,\u0022shell.execute_reply.started\u0022:\u00222021-06-06T09:45:12.506175Z\u0022,\u0022shell.execute_reply\u0022:\u00222021-06-06T09:45:12.518703Z\u0022},\u0022trusted\u0022:true},\u0022execution_count\u0022:null,\u0022outputs\u0022:[]},{\u0022cell_type\u0022:\u0022markdown\u0022,\u0022source\u0022:\u0022## Reading in data\u0022,\u0022metadata\u0022:{}},{\u0022cell_type\u0022:\u0022code\u0022,\u0022source\u0022:\u0022df_sample_submission = pd.read_csv(\u0027/kaggle/input/edsa-movie-recommendation-challenge/sample_submission.csv\u0027)\\ndf_movies = pd.read_csv(\u0027/kaggle/input/edsa-movie-recommendation-challenge/movies.csv\u0027)\\ndf_imdb = pd.read_csv(\u0027/kaggle/input/edsa-movie-recommendation-challenge/imdb_data.csv\u0027)\\ndf_genome_scores = pd.read_csv(\u0027/kaggle/input/edsa-movie-recommendation-challenge/genome_scores.csv\u0027)\\ndf_genome_tags = pd.read_csv(\u0027/kaggle/input/edsa-movie-recommendation-challenge/genome_tags.csv\u0027)\\ndf_train = pd.read_csv(\u0027/kaggle/input/edsa-movie-recommendation-challenge/train.csv\u0027)\\ndf_test = pd.read_csv(\u0027/kaggle/input/edsa-movie-recommendation-challenge/test.csv\u0027)\\ndf_tags = pd.read_csv(\u0027/kaggle/input/edsa-movie-recommendation-challenge/tags.csv\u0027)\\ndf_links = pd.read_csv(\u0027/kaggle/input/edsa-movie-recommendation-challenge/links.csv\u0027)\u0022,\u0022metadata\u0022:{\u0022execution\u0022:{\u0022iopub.status.busy\u0022:\u00222021-06-06T09:35:50.493053Z\u0022,\u0022iopub.execute_input\u0022:\u00222021-06-06T09:35:50.493379Z\u0022,\u0022iopub.status.idle\u0022:\u00222021-06-06T09:36:13.587633Z\u0022,\u0022shell.execute_reply.started\u0022:\u00222021-06-06T09:35:50.49335Z\u0022,\u0022shell.execute_reply\u0022:\u00222021-06-06T09:36:13.586562Z\u0022},\u0022trusted\u0022:true},\u0022execution_count\u0022:null,\u0022outputs\u0022:[]},{\u0022cell_type\u0022:\u0022code\u0022,\u0022source\u0022:\u0022df_movies.head()\u0022,\u0022metadata\u0022:{\u0022execution\u0022:{\u0022iopub.status.busy\u0022:\u00222021-06-06T09:36:13.589364Z\u0022,\u0022iopub.execute_input\u0022:\u00222021-06-06T09:36:13.589777Z\u0022,\u0022iopub.status.idle\u0022:\u00222021-06-06T09:36:13.616035Z\u0022,\u0022shell.execute_reply.started\u0022:\u00222021-06-06T09:36:13.589735Z\u0022,\u0022shell.execute_reply\u0022:\u00222021-06-06T09:36:13.615353Z\u0022},\u0022trusted\u0022:true},\u0022execution_count\u0022:null,\u0022outputs\u0022:[]},{\u0022cell_type\u0022:\u0022code\u0022,\u0022source\u0022:\u0022df_sample_submission.head()\u0022,\u0022metadata\u0022:{\u0022execution\u0022:{\u0022iopub.status.busy\u0022:\u00222021-06-06T10:02:45.481244Z\u0022,\u0022iopub.execute_input\u0022:\u00222021-06-06T10:02:45.481673Z\u0022,\u0022iopub.status.idle\u0022:\u00222021-06-06T10:02:45.497816Z\u0022,\u0022shell.execute_reply.started\u0022:\u00222021-06-06T10:02:45.481641Z\u0022,\u0022shell.execute_reply\u0022:\u00222021-06-06T10:02:45.4963Z\u0022},\u0022trusted\u0022:true},\u0022execution_count\u0022:null,\u0022outputs\u0022:[]},{\u0022cell_type\u0022:\u0022markdown\u0022,\u0022source\u0022:\u0022## EDA\\nDiscovery phase and data understanding\u0022,\u0022metadata\u0022:{}},{\u0022cell_type\u0022:\u0022markdown\u0022,\u0022source\u0022:\u0022**Most common Genres**\u0022,\u0022metadata\u0022:{}},{\u0022cell_type\u0022:\u0022code\u0022,\u0022source\u0022:\u0022# Create dataframe containing only the movieId and genres\\nmovies_genres = pd.DataFrame(df_movies[[\u0027movieId\u0027, \u0027genres\u0027]],\\n                             columns=[\u0027movieId\u0027, \u0027genres\u0027])\\n\\n# Split genres seperated by \\\u0022|\\\u0022 and create a list containing the genres allocated to each movie\\nmovies_genres.genres = movies_genres.genres.apply(lambda x: x.split(\u0027|\u0027))\\n\\n# Create expanded dataframe where each movie-genre combination is in a seperate row\\nmovies_genres = pd.DataFrame([(tup.movieId, d) for tup in movies_genres.itertuples() for d in tup.genres],\\n                             columns=[\u0027movieId\u0027, \u0027genres\u0027])\\n\\nmovies_genres.head()\u0022,\u0022metadata\u0022:{\u0022execution\u0022:{\u0022iopub.status.busy\u0022:\u00222021-06-06T09:44:14.281919Z\u0022,\u0022iopub.execute_input\u0022:\u00222021-06-06T09:44:14.282306Z\u0022,\u0022iopub.status.idle\u0022:\u00222021-06-06T09:44:14.600032Z\u0022,\u0022shell.execute_reply.started\u0022:\u00222021-06-06T09:44:14.282271Z\u0022,\u0022shell.execute_reply\u0022:\u00222021-06-06T09:44:14.599122Z\u0022},\u0022trusted\u0022:true},\u0022execution_count\u0022:null,\u0022outputs\u0022:[]},{\u0022cell_type\u0022:\u0022code\u0022,\u0022source\u0022:\u0022# Plot the genres from most common to least common\\nplot = plt.figure(figsize=(15, 10))\\nplt.title(\u0027Most common genres\\\\n\u0027, fontsize=20)\\nsns.countplot(y=\\\u0022genres\\\u0022, data=movies_genres,\\n              order=movies_genres[\u0027genres\u0027].value_counts(ascending=False).index,\\n              palette=\u0027Reds_r\u0027)\\nplt.show()\u0022,\u0022metadata\u0022:{\u0022execution\u0022:{\u0022iopub.status.busy\u0022:\u00222021-06-06T09:46:18.64425Z\u0022,\u0022iopub.execute_input\u0022:\u00222021-06-06T09:46:18.645107Z\u0022,\u0022iopub.status.idle\u0022:\u00222021-06-06T09:46:19.072342Z\u0022,\u0022shell.execute_reply.started\u0022:\u00222021-06-06T09:46:18.645034Z\u0022,\u0022shell.execute_reply\u0022:\u00222021-06-06T09:46:19.07134Z\u0022},\u0022trusted\u0022:true},\u0022execution_count\u0022:null,\u0022outputs\u0022:[]},{\u0022cell_type\u0022:\u0022markdown\u0022,\u0022source\u0022:\u0022## Data Prepartion\u0022,\u0022metadata\u0022:{}},{\u0022cell_type\u0022:\u0022code\u0022,\u0022source\u0022:\u0022## Here you will sort your data out and process it accordingly\u0022,\u0022metadata\u0022:{\u0022execution\u0022:{\u0022iopub.status.busy\u0022:\u00222021-06-06T09:47:42.880465Z\u0022,\u0022iopub.execute_input\u0022:\u00222021-06-06T09:47:42.880955Z\u0022,\u0022iopub.status.idle\u0022:\u00222021-06-06T09:47:42.885223Z\u0022,\u0022shell.execute_reply.started\u0022:\u00222021-06-06T09:47:42.880914Z\u0022,\u0022shell.execute_reply\u0022:\u00222021-06-06T09:47:42.88448Z\u0022},\u0022trusted\u0022:true},\u0022execution_count\u0022:null,\u0022outputs\u0022:[]},{\u0022cell_type\u0022:\u0022markdown\u0022,\u0022source\u0022:\u0022## Modelling phase\\n\\nHere you can apply the models outline in the Intro to Recommender Notebook. You only need to apply one version \\nbe it Content based or Collabrative method\\n\\n\u0022,\u0022metadata\u0022:{}},{\u0022cell_type\u0022:\u0022code\u0022,\u0022source\u0022:\u0022# Apply your modelling here\u0022,\u0022metadata\u0022:{\u0022execution\u0022:{\u0022iopub.status.busy\u0022:\u00222021-06-06T09:55:07.155017Z\u0022,\u0022iopub.execute_input\u0022:\u00222021-06-06T09:55:07.15548Z\u0022,\u0022iopub.status.idle\u0022:\u00222021-06-06T09:55:07.160449Z\u0022,\u0022shell.execute_reply.started\u0022:\u00222021-06-06T09:55:07.155448Z\u0022,\u0022shell.execute_reply\u0022:\u00222021-06-06T09:55:07.159046Z\u0022},\u0022trusted\u0022:true},\u0022execution_count\u0022:null,\u0022outputs\u0022:[]},{\u0022cell_type\u0022:\u0022markdown\u0022,\u0022source\u0022:\u0022# Generate your outputs here\u0022,\u0022metadata\u0022:{}},{\u0022cell_type\u0022:\u0022markdown\u0022,\u0022source\u0022:\u0022Prepare Submission File\\nWe make submissions in CSV files. Your submissions usually have two columns: an ID column and a prediction column. The ID field comes from the test data (keeping whatever name the ID field had in that data, which for the data is the string \u0027Id\u0027). The prediction column will use the name of the target field.\\n\\nWe will create a DataFrame with this data, and then use the dataframe\u0027s to_csv method to write our submission file. Explicitly include the argument index=False to prevent pandas from adding another column in our csv file.\u0022,\u0022metadata\u0022:{}},{\u0022cell_type\u0022:\u0022code\u0022,\u0022source\u0022:\u0022# This is an example\\n## my_submission = pd.DataFrame({\u0027id\u0027: test.Id, \u0027rating\u0027: test.ratings})\\n# you could use any filename. We choose submission here\\n## my_submission.to_csv(\u0027submission.csv\u0027, index=False)\u0022,\u0022metadata\u0022:{\u0022trusted\u0022:true},\u0022execution_count\u0022:null,\u0022outputs\u0022:[]},{\u0022cell_type\u0022:\u0022markdown\u0022,\u0022source\u0022:\u0022\\n### Make Submission\\nHit the blue Publish button at the top of your notebook screen. It will take some time for your kernel to run. When it has finished your navigation bar at the top of the screen will have a tab for Output. This only shows up if you have written an output file (like we did in the Prepare Submission File step).\u0022,\u0022metadata\u0022:{}},{\u0022cell_type\u0022:\u0022markdown\u0022,\u0022source\u0022:\u0022Example below of how the output would look once published\u0022,\u0022metadata\u0022:{}},{\u0022cell_type\u0022:\u0022code\u0022,\u0022source\u0022:\u0022# initialize list of lists\\ndata = [[\u0027tom\u0027, 10], [\u0027nick\u0027, 15], [\u0027juli\u0027, 14]]\\n  \\n# Create the pandas DataFrame\\ndf = pd.DataFrame(data, columns = [\u0027Name\u0027, \u0027Age\u0027])\\n  \\n# print dataframe.\\ndf\u0022,\u0022metadata\u0022:{\u0022execution\u0022:{\u0022iopub.status.busy\u0022:\u00222021-06-14T11:18:10.359149Z\u0022,\u0022iopub.execute_input\u0022:\u00222021-06-14T11:18:10.359547Z\u0022,\u0022iopub.status.idle\u0022:\u00222021-06-14T11:18:10.396861Z\u0022,\u0022shell.execute_reply.started\u0022:\u00222021-06-14T11:18:10.359508Z\u0022,\u0022shell.execute_reply\u0022:\u00222021-06-14T11:18:10.395398Z\u0022},\u0022trusted\u0022:true},\u0022execution_count\u0022:null,\u0022outputs\u0022:[]},{\u0022cell_type\u0022:\u0022code\u0022,\u0022source\u0022:\u0022df.to_csv(\u0027my_test_output.csv\u0027, index = False)\u0022,\u0022metadata\u0022:{\u0022execution\u0022:{\u0022iopub.status.busy\u0022:\u00222021-06-14T11:19:27.072313Z\u0022,\u0022iopub.execute_input\u0022:\u00222021-06-14T11:19:27.072708Z\u0022,\u0022iopub.status.idle\u0022:\u00222021-06-14T11:19:27.081678Z\u0022,\u0022shell.execute_reply.started\u0022:\u00222021-06-14T11:19:27.072676Z\u0022,\u0022shell.execute_reply\u0022:\u00222021-06-14T11:19:27.080684Z\u0022},\u0022trusted\u0022:true},\u0022execution_count\u0022:null,\u0022outputs\u0022:[]},{\u0022cell_type\u0022:\u0022code\u0022,\u0022source\u0022:\u0022\u0022,\u0022metadata\u0022:{},\u0022execution_count\u0022:null,\u0022outputs\u0022:[]}]}","dateCreated":"2021-06-14T11:17:40.5014207Z"},"kernelRun":{"id":65706985,"kernelId":17441449,"status":"complete","kernelVersionType":"batch","sourceType":"notebook","language":"python","title":"Starter Notebook Guide","dateCreated":"2021-06-14T11:19:36.253Z","dateEvaluated":"2021-06-14T11:19:37.77Z","dateCancelled":null,"workerContainerPort":null,"workerUptimeSeconds":231,"workerIPAddress":"172.21.2.17    ","workerIPAddressExternal":"35.227.81.94   ","scriptLanguageId":9,"scriptLanguageName":"IPython Notebook HTML","renderedOutputUrl":"https://www.kaggleusercontent.com/kf/65706985/eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..d38m6cdq4ED85QBRHBEBfw.vGksAGyv1M7Hd3atUv09KZ2f_fOzvf6lQ3v6PcOWpbCuWPuk0L5IOye2CYsdpPrPfunT7hl6ZHc79AqoDMAwzQyST3Az_3gahckECF6tjSc95XdhtMuvfX5hIvrUQsr5zx7ReHZiafPom9SyHZjdEMRn47IvbmqEtYPVmstm3MiOFZpbZYSNZZBQZ2tLPE6B8doP4PPC7YSIx7BAxqQWOLms1LWHzgkR3kWgLgTRTo45Pc9iivLCiymWgxRrwpQqbcYaj_sBLZU289IWYLGO3lfOHmZpEA_fHCYztEWqV8a7rLwWMNitZKmmmpUtQJ4NY4wAl8fGsFcUV1Col3oinc7aOea9czWrA195uL5rpdtoPgLPaSRG7rgKuK6tnkvJnWpKw7pIYGOGlvoo1ywCwxAx3nyGgc78at6kUNSPrh_R0YhZyG2Ca2oJDDhCM54jFNuvGCnIzCElKkCM7Lndk3xj8mRX7e0udLcrnJzaXOKnm-jTg8LtzxgQDORvavNnoeAHWUxklbXKUm3BPXmgVFRYSYo1xV-Wkwcyd1Kc3zb3q3LCNp1dslvY7cavaMWDqnxfEFWJx6QOjFrh5v2668c3JyFNKvbB7G09Oh44yXbUPbteIlG1LChuyHJATHs9327THmp-o9SbLtBN659IAQQMau2sPfLS0nUtYOIrphk.Y48HXvYN78Wc4DyfNwvJUA/__resultx__.html?sharingControls=true","commit":{"id":659730609,"settings":{"dockerImageVersionId":null,"dataSources":[{"sourceType":"Competition","sourceId":27685,"datasetId":null,"databundleVersionId":null,"mountSlug":"edsa-movie-recommendation-challenge"}],"sourceType":"notebook","language":"python","accelerator":"none","isInternetEnabled":false},"source":"{\u0022metadata\u0022:{\u0022kernelspec\u0022:{\u0022language\u0022:\u0022python\u0022,\u0022display_name\u0022:\u0022Python 3\u0022,\u0022name\u0022:\u0022python3\u0022},\u0022language_info\u0022:{\u0022pygments_lexer\u0022:\u0022ipython3\u0022,\u0022nbconvert_exporter\u0022:\u0022python\u0022,\u0022version\u0022:\u00223.6.4\u0022,\u0022file_extension\u0022:\u0022.py\u0022,\u0022codemirror_mode\u0022:{\u0022name\u0022:\u0022ipython\u0022,\u0022version\u0022:3},\u0022name\u0022:\u0022python\u0022,\u0022mimetype\u0022:\u0022text/x-python\u0022}},\u0022nbformat_minor\u0022:4,\u0022nbformat\u0022:4,\u0022cells\u0022:[{\u0022cell_type\u0022:\u0022markdown\u0022,\u0022source\u0022:\u0022# Introduction\\n\\nThe followig aims to get you up and running with the predict. Make a copy of the notebook and run all cells. We will also show you how to get your submission file from kaggle. \u0022,\u0022metadata\u0022:{}},{\u0022cell_type\u0022:\u0022code\u0022,\u0022source\u0022:\u0022# This Python 3 environment comes with many helpful analytics libraries installed\\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\\n# For example, here\u0027s several helpful packages to load\\n\\nimport numpy as np # linear algebra\\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\\n\\n# Input data files are available in the read-only \\\u0022../input/\\\u0022 directory\\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\\n\\nimport os\\nfor dirname, _, filenames in os.walk(\u0027/kaggle/input\u0027):\\n    for filename in filenames:\\n        print(os.path.join(dirname, filename))\\n\\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \\\u0022Save \u0026 Run All\\\u0022 \\n# You can also write temporary files to /kaggle/temp/, but they won\u0027t be saved outside of the current session\u0022,\u0022metadata\u0022:{\u0022_uuid\u0022:\u00228f2839f25d086af736a60e9eeb907d3b93b6e0e5\u0022,\u0022_cell_guid\u0022:\u0022b1076dfc-b9ad-4769-8c92-a6c4dae69d19\u0022,\u0022execution\u0022:{\u0022iopub.status.busy\u0022:\u00222021-06-14T11:18:06.29795Z\u0022,\u0022iopub.execute_input\u0022:\u00222021-06-14T11:18:06.298449Z\u0022,\u0022iopub.status.idle\u0022:\u00222021-06-14T11:18:06.313041Z\u0022,\u0022shell.execute_reply.started\u0022:\u00222021-06-14T11:18:06.298343Z\u0022,\u0022shell.execute_reply\u0022:\u00222021-06-14T11:18:06.311996Z\u0022},\u0022trusted\u0022:true},\u0022execution_count\u0022:null,\u0022outputs\u0022:[]},{\u0022cell_type\u0022:\u0022markdown\u0022,\u0022source\u0022:\u0022## Installing packages\\nPlease download all relevant packages in. There is no terminal so you will pip install everything.\\n\\nYou can find a list of recommended install from the Intro to Recommender sysytem notebook.\u0022,\u0022metadata\u0022:{}},{\u0022cell_type\u0022:\u0022code\u0022,\u0022source\u0022:\u0022# Install packages here\\n# Packages for data processing\\nimport numpy as np\\nimport pandas as pd\\nimport datetime\\nfrom sklearn import preprocessing\\nfrom sklearn.datasets import make_blobs\\nfrom sklearn.preprocessing import StandardScaler\\nfrom sklearn.feature_extraction.text import TfidfVectorizer\\nfrom sklearn.metrics.pairwise import cosine_similarity\\nimport re\\nfrom scipy.sparse import csr_matrix\\nimport scipy as sp\\n\\n\\n# Packages for visualization\\nimport matplotlib.pyplot as plt\\nimport seaborn as sns\\n%matplotlib inline\\n\\n# Packages for modeling\\nfrom surprise import Reader\\nfrom surprise import Dataset\\nfrom surprise import KNNWithMeans\\nfrom surprise import KNNBasic\\nfrom surprise.model_selection import cross_validate\\nfrom surprise.model_selection import GridSearchCV\\nfrom surprise import SVD\\nfrom surprise import SVDpp\\nfrom surprise import NMF\\nfrom surprise import SlopeOne\\nfrom surprise import CoClustering\\nimport heapq\\n\\n# Packages for model evaluation\\nfrom sklearn.metrics import mean_squared_error\\nfrom sklearn.metrics import mean_absolute_error\\nfrom time import time\\n\\n# Package to suppress warnings\\nimport warnings\\nwarnings.filterwarnings(\\\u0022ignore\\\u0022)\\n\\n# Packages for saving models\\nimport pickle\u0022,\u0022metadata\u0022:{\u0022execution\u0022:{\u0022iopub.status.busy\u0022:\u00222021-06-06T09:45:12.505806Z\u0022,\u0022iopub.execute_input\u0022:\u00222021-06-06T09:45:12.506211Z\u0022,\u0022iopub.status.idle\u0022:\u00222021-06-06T09:45:12.519781Z\u0022,\u0022shell.execute_reply.started\u0022:\u00222021-06-06T09:45:12.506175Z\u0022,\u0022shell.execute_reply\u0022:\u00222021-06-06T09:45:12.518703Z\u0022},\u0022trusted\u0022:true},\u0022execution_count\u0022:null,\u0022outputs\u0022:[]},{\u0022cell_type\u0022:\u0022markdown\u0022,\u0022source\u0022:\u0022## Reading in data\u0022,\u0022metadata\u0022:{}},{\u0022cell_type\u0022:\u0022code\u0022,\u0022source\u0022:\u0022df_sample_submission = pd.read_csv(\u0027/kaggle/input/edsa-movie-recommendation-challenge/sample_submission.csv\u0027)\\ndf_movies = pd.read_csv(\u0027/kaggle/input/edsa-movie-recommendation-challenge/movies.csv\u0027)\\ndf_imdb = pd.read_csv(\u0027/kaggle/input/edsa-movie-recommendation-challenge/imdb_data.csv\u0027)\\ndf_genome_scores = pd.read_csv(\u0027/kaggle/input/edsa-movie-recommendation-challenge/genome_scores.csv\u0027)\\ndf_genome_tags = pd.read_csv(\u0027/kaggle/input/edsa-movie-recommendation-challenge/genome_tags.csv\u0027)\\ndf_train = pd.read_csv(\u0027/kaggle/input/edsa-movie-recommendation-challenge/train.csv\u0027)\\ndf_test = pd.read_csv(\u0027/kaggle/input/edsa-movie-recommendation-challenge/test.csv\u0027)\\ndf_tags = pd.read_csv(\u0027/kaggle/input/edsa-movie-recommendation-challenge/tags.csv\u0027)\\ndf_links = pd.read_csv(\u0027/kaggle/input/edsa-movie-recommendation-challenge/links.csv\u0027)\u0022,\u0022metadata\u0022:{\u0022execution\u0022:{\u0022iopub.status.busy\u0022:\u00222021-06-06T09:35:50.493053Z\u0022,\u0022iopub.execute_input\u0022:\u00222021-06-06T09:35:50.493379Z\u0022,\u0022iopub.status.idle\u0022:\u00222021-06-06T09:36:13.587633Z\u0022,\u0022shell.execute_reply.started\u0022:\u00222021-06-06T09:35:50.49335Z\u0022,\u0022shell.execute_reply\u0022:\u00222021-06-06T09:36:13.586562Z\u0022},\u0022trusted\u0022:true},\u0022execution_count\u0022:null,\u0022outputs\u0022:[]},{\u0022cell_type\u0022:\u0022code\u0022,\u0022source\u0022:\u0022df_movies.head()\u0022,\u0022metadata\u0022:{\u0022execution\u0022:{\u0022iopub.status.busy\u0022:\u00222021-06-06T09:36:13.589364Z\u0022,\u0022iopub.execute_input\u0022:\u00222021-06-06T09:36:13.589777Z\u0022,\u0022iopub.status.idle\u0022:\u00222021-06-06T09:36:13.616035Z\u0022,\u0022shell.execute_reply.started\u0022:\u00222021-06-06T09:36:13.589735Z\u0022,\u0022shell.execute_reply\u0022:\u00222021-06-06T09:36:13.615353Z\u0022},\u0022trusted\u0022:true},\u0022execution_count\u0022:null,\u0022outputs\u0022:[]},{\u0022cell_type\u0022:\u0022code\u0022,\u0022source\u0022:\u0022df_sample_submission.head()\u0022,\u0022metadata\u0022:{\u0022execution\u0022:{\u0022iopub.status.busy\u0022:\u00222021-06-06T10:02:45.481244Z\u0022,\u0022iopub.execute_input\u0022:\u00222021-06-06T10:02:45.481673Z\u0022,\u0022iopub.status.idle\u0022:\u00222021-06-06T10:02:45.497816Z\u0022,\u0022shell.execute_reply.started\u0022:\u00222021-06-06T10:02:45.481641Z\u0022,\u0022shell.execute_reply\u0022:\u00222021-06-06T10:02:45.4963Z\u0022},\u0022trusted\u0022:true},\u0022execution_count\u0022:null,\u0022outputs\u0022:[]},{\u0022cell_type\u0022:\u0022markdown\u0022,\u0022source\u0022:\u0022## EDA\\nDiscovery phase and data understanding\u0022,\u0022metadata\u0022:{}},{\u0022cell_type\u0022:\u0022markdown\u0022,\u0022source\u0022:\u0022**Most common Genres**\u0022,\u0022metadata\u0022:{}},{\u0022cell_type\u0022:\u0022code\u0022,\u0022source\u0022:\u0022# Create dataframe containing only the movieId and genres\\nmovies_genres = pd.DataFrame(df_movies[[\u0027movieId\u0027, \u0027genres\u0027]],\\n                             columns=[\u0027movieId\u0027, \u0027genres\u0027])\\n\\n# Split genres seperated by \\\u0022|\\\u0022 and create a list containing the genres allocated to each movie\\nmovies_genres.genres = movies_genres.genres.apply(lambda x: x.split(\u0027|\u0027))\\n\\n# Create expanded dataframe where each movie-genre combination is in a seperate row\\nmovies_genres = pd.DataFrame([(tup.movieId, d) for tup in movies_genres.itertuples() for d in tup.genres],\\n                             columns=[\u0027movieId\u0027, \u0027genres\u0027])\\n\\nmovies_genres.head()\u0022,\u0022metadata\u0022:{\u0022execution\u0022:{\u0022iopub.status.busy\u0022:\u00222021-06-06T09:44:14.281919Z\u0022,\u0022iopub.execute_input\u0022:\u00222021-06-06T09:44:14.282306Z\u0022,\u0022iopub.status.idle\u0022:\u00222021-06-06T09:44:14.600032Z\u0022,\u0022shell.execute_reply.started\u0022:\u00222021-06-06T09:44:14.282271Z\u0022,\u0022shell.execute_reply\u0022:\u00222021-06-06T09:44:14.599122Z\u0022},\u0022trusted\u0022:true},\u0022execution_count\u0022:null,\u0022outputs\u0022:[]},{\u0022cell_type\u0022:\u0022code\u0022,\u0022source\u0022:\u0022# Plot the genres from most common to least common\\nplot = plt.figure(figsize=(15, 10))\\nplt.title(\u0027Most common genres\\\\n\u0027, fontsize=20)\\nsns.countplot(y=\\\u0022genres\\\u0022, data=movies_genres,\\n              order=movies_genres[\u0027genres\u0027].value_counts(ascending=False).index,\\n              palette=\u0027Reds_r\u0027)\\nplt.show()\u0022,\u0022metadata\u0022:{\u0022execution\u0022:{\u0022iopub.status.busy\u0022:\u00222021-06-06T09:46:18.64425Z\u0022,\u0022iopub.execute_input\u0022:\u00222021-06-06T09:46:18.645107Z\u0022,\u0022iopub.status.idle\u0022:\u00222021-06-06T09:46:19.072342Z\u0022,\u0022shell.execute_reply.started\u0022:\u00222021-06-06T09:46:18.645034Z\u0022,\u0022shell.execute_reply\u0022:\u00222021-06-06T09:46:19.07134Z\u0022},\u0022trusted\u0022:true},\u0022execution_count\u0022:null,\u0022outputs\u0022:[]},{\u0022cell_type\u0022:\u0022markdown\u0022,\u0022source\u0022:\u0022## Data Prepartion\u0022,\u0022metadata\u0022:{}},{\u0022cell_type\u0022:\u0022code\u0022,\u0022source\u0022:\u0022## Here you will sort your data out and process it accordingly\u0022,\u0022metadata\u0022:{\u0022execution\u0022:{\u0022iopub.status.busy\u0022:\u00222021-06-06T09:47:42.880465Z\u0022,\u0022iopub.execute_input\u0022:\u00222021-06-06T09:47:42.880955Z\u0022,\u0022iopub.status.idle\u0022:\u00222021-06-06T09:47:42.885223Z\u0022,\u0022shell.execute_reply.started\u0022:\u00222021-06-06T09:47:42.880914Z\u0022,\u0022shell.execute_reply\u0022:\u00222021-06-06T09:47:42.88448Z\u0022},\u0022trusted\u0022:true},\u0022execution_count\u0022:null,\u0022outputs\u0022:[]},{\u0022cell_type\u0022:\u0022markdown\u0022,\u0022source\u0022:\u0022## Modelling phase\\n\\nHere you can apply the models outline in the Intro to Recommender Notebook. You only need to apply one version \\nbe it Content based or Collabrative method\\n\\n\u0022,\u0022metadata\u0022:{}},{\u0022cell_type\u0022:\u0022code\u0022,\u0022source\u0022:\u0022# Apply your modelling here\u0022,\u0022metadata\u0022:{\u0022execution\u0022:{\u0022iopub.status.busy\u0022:\u00222021-06-06T09:55:07.155017Z\u0022,\u0022iopub.execute_input\u0022:\u00222021-06-06T09:55:07.15548Z\u0022,\u0022iopub.status.idle\u0022:\u00222021-06-06T09:55:07.160449Z\u0022,\u0022shell.execute_reply.started\u0022:\u00222021-06-06T09:55:07.155448Z\u0022,\u0022shell.execute_reply\u0022:\u00222021-06-06T09:55:07.159046Z\u0022},\u0022trusted\u0022:true},\u0022execution_count\u0022:null,\u0022outputs\u0022:[]},{\u0022cell_type\u0022:\u0022markdown\u0022,\u0022source\u0022:\u0022# Generate your outputs here\u0022,\u0022metadata\u0022:{}},{\u0022cell_type\u0022:\u0022markdown\u0022,\u0022source\u0022:\u0022Prepare Submission File\\nWe make submissions in CSV files. Your submissions usually have two columns: an ID column and a prediction column. The ID field comes from the test data (keeping whatever name the ID field had in that data, which for the data is the string \u0027Id\u0027). The prediction column will use the name of the target field.\\n\\nWe will create a DataFrame with this data, and then use the dataframe\u0027s to_csv method to write our submission file. Explicitly include the argument index=False to prevent pandas from adding another column in our csv file.\u0022,\u0022metadata\u0022:{}},{\u0022cell_type\u0022:\u0022code\u0022,\u0022source\u0022:\u0022# This is an example\\n## my_submission = pd.DataFrame({\u0027id\u0027: test.Id, \u0027rating\u0027: test.ratings})\\n# you could use any filename. We choose submission here\\n## my_submission.to_csv(\u0027submission.csv\u0027, index=False)\u0022,\u0022metadata\u0022:{\u0022trusted\u0022:true},\u0022execution_count\u0022:null,\u0022outputs\u0022:[]},{\u0022cell_type\u0022:\u0022markdown\u0022,\u0022source\u0022:\u0022\\n### Make Submission\\nHit the blue Publish button at the top of your notebook screen. It will take some time for your kernel to run. When it has finished your navigation bar at the top of the screen will have a tab for Output. This only shows up if you have written an output file (like we did in the Prepare Submission File step).\u0022,\u0022metadata\u0022:{}},{\u0022cell_type\u0022:\u0022markdown\u0022,\u0022source\u0022:\u0022Example below of how the output would look once published\u0022,\u0022metadata\u0022:{}},{\u0022cell_type\u0022:\u0022code\u0022,\u0022source\u0022:\u0022# initialize list of lists\\ndata = [[\u0027tom\u0027, 10], [\u0027nick\u0027, 15], [\u0027juli\u0027, 14]]\\n  \\n# Create the pandas DataFrame\\ndf = pd.DataFrame(data, columns = [\u0027Name\u0027, \u0027Age\u0027])\\n  \\n# print dataframe.\\ndf\u0022,\u0022metadata\u0022:{\u0022execution\u0022:{\u0022iopub.status.busy\u0022:\u00222021-06-14T11:18:10.359149Z\u0022,\u0022iopub.execute_input\u0022:\u00222021-06-14T11:18:10.359547Z\u0022,\u0022iopub.status.idle\u0022:\u00222021-06-14T11:18:10.396861Z\u0022,\u0022shell.execute_reply.started\u0022:\u00222021-06-14T11:18:10.359508Z\u0022,\u0022shell.execute_reply\u0022:\u00222021-06-14T11:18:10.395398Z\u0022},\u0022trusted\u0022:true},\u0022execution_count\u0022:null,\u0022outputs\u0022:[]},{\u0022cell_type\u0022:\u0022code\u0022,\u0022source\u0022:\u0022df.to_csv(\u0027my_test_output.csv\u0027, index = False)\u0022,\u0022metadata\u0022:{\u0022execution\u0022:{\u0022iopub.status.busy\u0022:\u00222021-06-14T11:19:27.072313Z\u0022,\u0022iopub.execute_input\u0022:\u00222021-06-14T11:19:27.072708Z\u0022,\u0022iopub.status.idle\u0022:\u00222021-06-14T11:19:27.081678Z\u0022,\u0022shell.execute_reply.started\u0022:\u00222021-06-14T11:19:27.072676Z\u0022,\u0022shell.execute_reply\u0022:\u00222021-06-14T11:19:27.080684Z\u0022},\u0022trusted\u0022:true},\u0022execution_count\u0022:null,\u0022outputs\u0022:[]},{\u0022cell_type\u0022:\u0022code\u0022,\u0022source\u0022:\u0022\u0022,\u0022metadata\u0022:{},\u0022execution_count\u0022:null,\u0022outputs\u0022:[]}]}","dateCreated":"2021-06-14T11:17:40.5014207Z"},"resources":null,"isolatorResults":"\u003cresults\u003e\u003cexit_code\u003e0\u003c/exit_code\u003e\u003cinvalid_path_errors\u003eFalse\u003c/invalid_path_errors\u003e\u003cout_of_memory\u003eFalse\u003c/out_of_memory\u003e\u003crun_time_seconds\u003e34.2651532\u003c/run_time_seconds\u003e\u003csucceeded\u003eTrue\u003c/succeeded\u003e\u003ctimeout_exceeded\u003eFalse\u003c/timeout_exceeded\u003e\u003cused_all_space\u003eFalse\u003c/used_all_space\u003e\u003cwas_killed\u003eFalse\u003c/was_killed\u003e\u003cdocker_image_name\u003egcr.io/kaggle-images/python@sha256:648f97c8be132f304cff3d397339f2d815de79721f3695f43c08a6aec3bc0a5d\u003c/docker_image_name\u003e\u003cdocker_image_digest\u003e648f97c8be132f304cff3d397339f2d815de79721f3695f43c08a6aec3bc0a5d\u003c/docker_image_digest\u003e\u003cdocker_image_id\u003esha256:8f433497a6531c058852acca2245b7428c12f179d879d8cc92582540784fe442\u003c/docker_image_id\u003e\u003coutput_size_bytes\u003e32\u003c/output_size_bytes\u003e\u003c/results\u003e","runInfo":{"dockerfileUrl":"https://github.com/Kaggle/docker-python/blob/master/Dockerfile","dockerHubUrl":"https://gcr.io/kaggle-images/python@sha256:648f97c8be132f304cff3d397339f2d815de79721f3695f43c08a6aec3bc0a5d","dockerImageDigest":"648f97c8be132f304cff3d397339f2d815de79721f3695f43c08a6aec3bc0a5d","dockerImageId":"sha256:8f433497a6531c058852acca2245b7428c12f179d879d8cc92582540784fe442","dockerImageName":"gcr.io/kaggle-images/python@sha256:648f97c8be132f304cff3d397339f2d815de79721f3695f43c08a6aec3bc0a5d","diskKbFree":0,"failureMessage":null,"exitCode":0,"queuedSeconds":0,"outputSizeBytes":32,"runTimeSeconds":34.2651532,"usedAllSpace":false,"timeoutExceeded":false,"isValidStatus":false,"wasGpuEnabled":false,"wasInternetEnabled":false,"outOfMemory":false,"invalidPathErrors":false,"succeeded":true,"wasKilled":false},"dockerImageVersionId":30096,"usedCustomDockerImage":false,"dataSources":[{"sourceType":"Competition","sourceId":27685,"datasetId":null,"databundleVersionId":2229266,"mountSlug":"edsa-movie-recommendation-challenge"}],"useNewKernelsBackend":true,"isGpuEnabled":false,"isTpuEnabled":false,"acceleratorType":"none","isInternetEnabled":false,"userPlan":"free"},"author":{"id":2205222,"displayName":"Explore Data Science Academy","email":null,"editedEmail":null,"editedEmailCode":null,"userName":"exploredatascience","thumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/2205222-kg.png","profileUrl":"/exploredatascience","registerDate":"0001-01-01T00:00:00Z","lastVisitDate":"0001-01-01T00:00:00Z","statusId":0,"performanceTier":1,"grandfatheredCompetitionTier":null,"userLogins":null,"groupIds":null,"duplicateUsers":null,"hasPhoneVerifications":false,"failedNerdchas":0,"hasPendingNerdcha":false,"deleteRequests":null,"isAdmin":false,"isKaggleBot":false,"isAnonymous":false,"canAct":false,"canBeSeen":false,"thumbnailName":null,"isPhoneVerified":false},"baseUrl":"/exploredatascience/starter-notebook-guide","collaborators":{"owner":{"userId":2205222,"groupId":null,"groupMemberCount":null,"profileUrl":"/exploredatascience","thumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/2205222-kg.png","name":"Explore Data Science Academy","slug":"exploredatascience","userTier":1,"joinDate":null,"type":"owner","isUser":true,"isGroup":false},"collaborators":[]},"initialTab":"data","log":"[{\u0022stream_name\u0022:\u0022stdout\u0022,\u0022time\u0022:10.047380396,\u0022data\u0022:\u0022/kaggle/input/edsa-movie-recommendation-challenge/sample_submission.csv\\n\u0022}\n,{\u0022stream_name\u0022:\u0022stdout\u0022,\u0022time\u0022:10.047467814,\u0022data\u0022:\u0022/kaggle/input/edsa-movie-recommendation-challenge/movies.csv\\n\u0022}\n,{\u0022stream_name\u0022:\u0022stdout\u0022,\u0022time\u0022:10.047477254,\u0022data\u0022:\u0022/kaggle/input/edsa-movie-recommendation-challenge/imdb_data.csv\\n\u0022}\n,{\u0022stream_name\u0022:\u0022stdout\u0022,\u0022time\u0022:10.047483236,\u0022data\u0022:\u0022/kaggle/input/edsa-movie-recommendation-challenge/genome_tags.csv\\n\u0022}\n,{\u0022stream_name\u0022:\u0022stdout\u0022,\u0022time\u0022:10.047488908,\u0022data\u0022:\u0022/kaggle/input/edsa-movie-recommendation-challenge/genome_scores.csv\\n\u0022}\n,{\u0022stream_name\u0022:\u0022stdout\u0022,\u0022time\u0022:10.047494305,\u0022data\u0022:\u0022/kaggle/input/edsa-movie-recommendation-challenge/train.csv\\n\u0022}\n,{\u0022stream_name\u0022:\u0022stdout\u0022,\u0022time\u0022:10.0474994,\u0022data\u0022:\u0022/kaggle/input/edsa-movie-recommendation-challenge/test.csv\\n\u0022}\n,{\u0022stream_name\u0022:\u0022stdout\u0022,\u0022time\u0022:10.047504492,\u0022data\u0022:\u0022/kaggle/input/edsa-movie-recommendation-challenge/tags.csv\\n\u0022}\n,{\u0022stream_name\u0022:\u0022stdout\u0022,\u0022time\u0022:10.047509785,\u0022data\u0022:\u0022/kaggle/input/edsa-movie-recommendation-challenge/links.csv\\n\u0022}\n,{\u0022stream_name\u0022:\u0022stderr\u0022,\u0022time\u0022:32.368351833,\u0022data\u0022:\u0022/opt/conda/lib/python3.7/site-packages/traitlets/traitlets.py:2561: FutureWarning: --Exporter.preprocessors=[\\\u0022remove_papermill_header.RemovePapermillHeader\\\u0022] for containers is deprecated in traitlets 5.0. You can pass `--Exporter.preprocessors item` ... multiple times to add items to a list.\\n\u0022}\n,{\u0022stream_name\u0022:\u0022stderr\u0022,\u0022time\u0022:32.368422253,\u0022data\u0022:\u0022  FutureWarning,\\n\u0022}\n,{\u0022stream_name\u0022:\u0022stderr\u0022,\u0022time\u0022:32.368433422,\u0022data\u0022:\u0022[NbConvertApp] Converting notebook __notebook__.ipynb to notebook\\n\u0022}\n,{\u0022stream_name\u0022:\u0022stderr\u0022,\u0022time\u0022:32.50568512,\u0022data\u0022:\u0022[NbConvertApp] Writing 55606 bytes to __notebook__.ipynb\\n\u0022}\n,{\u0022stream_name\u0022:\u0022stderr\u0022,\u0022time\u0022:33.634401151,\u0022data\u0022:\u0022/opt/conda/lib/python3.7/site-packages/traitlets/traitlets.py:2561: FutureWarning: --Exporter.preprocessors=[\\\u0022nbconvert.preprocessors.ExtractOutputPreprocessor\\\u0022] for containers is deprecated in traitlets 5.0. You can pass `--Exporter.preprocessors item` ... multiple times to add items to a list.\\n\u0022}\n,{\u0022stream_name\u0022:\u0022stderr\u0022,\u0022time\u0022:33.634457419,\u0022data\u0022:\u0022  FutureWarning,\\n\u0022}\n,{\u0022stream_name\u0022:\u0022stderr\u0022,\u0022time\u0022:33.634464077,\u0022data\u0022:\u0022[NbConvertApp] Converting notebook __notebook__.ipynb to html\\n\u0022}\n,{\u0022stream_name\u0022:\u0022stderr\u0022,\u0022time\u0022:34.134264734,\u0022data\u0022:\u0022[NbConvertApp] Support files will be in __results___files/\\n\u0022}\n,{\u0022stream_name\u0022:\u0022stderr\u0022,\u0022time\u0022:34.134343214,\u0022data\u0022:\u0022[NbConvertApp] Making directory __results___files\\n\u0022}\n,{\u0022stream_name\u0022:\u0022stderr\u0022,\u0022time\u0022:34.134875222,\u0022data\u0022:\u0022[NbConvertApp] Writing 302122 bytes to __results__.html\\n\u0022}\n]","outputFiles":[{"kernelSessionOutputFileId":0,"kernelSessionId":65706985,"kernelId":17441449,"name":"__notebook__.ipynb","contentLength":55606,"fullPath":"__notebook__.ipynb","downloadUrl":"https://www.kaggleusercontent.com/kf/65706985/eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..MotnB2-G-DYLvCGOMnGY2g.XRJyeoRdrj6B1mFBScs-_XRKNTdrD1Oulx2a3UWiCOf3pb_GMxMcKhMGmRoEbaAGGCBd5TD4pnfmKL40CUtpk4O-05jDY3Xb3Y5L3PFYFHfe5E9IIPRQMq1Qz74hYJTmB6QArJWinFT2kAubtq6GB0Vs-TsV5kjOvaGpPk1Bk0I1CnCsNmIiNCv864p4sGSS1SwbALzHFkQeHm8ivZoSwj3ScWCp35seW5beThT_R77k21EXpDPYVb8qmpgxaptvINasu4EJ605-GUOUSoqdMRuTTrGuzvcACA57NPj7qzEiwZc9KMdxiuBD_qnJy6xPJ7N7QN_pmc66t6laQriRQ9_aC80a_pDKHj9p3-uyk722kDU4F7Q6-hrqW7snvqZdX3ay7O_Jwd31-0IDP3JGqiYIlRAQSeaVSuzuJOCMMKscPXscoL-6PbyPJHyWgue0Qk89GLeZ4dSSbC-s_Flkg8UjnR2qTJcmxJBTGRZnJ21RFoqrTnxD4qQvCcmwZF-jE5W0moOU2BaX3kuMq1gfwhkFiytX5RywRMOe4elvCagPFihjbU_KThH-8BzhKKgfhQjMOcYnUgmlhCXy8NKeM4NiG1r1UbN_rczzJ0-Zta-0rMvV0Hbj0BaQthuLv7h3bJyte9RzksAcXlytSoF7ThcaIcB5Nfz3uGRIRg1L70g.5ni4RDv9FeiEe0VTw7hdtA/__notebook__.ipynb","fileType":".ipynb"},{"kernelSessionOutputFileId":0,"kernelSessionId":65706985,"kernelId":17441449,"name":"__output__.json","contentLength":2628,"fullPath":"__output__.json","downloadUrl":"https://www.kaggleusercontent.com/kf/65706985/eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..zUxo6JeMAORhAE4ZtuxfUg.yArq34OK9S58OJG3GB_wM-xor-y_DXiQs7qFtR9XxTAqyPbZxnGybXgcuQvrBa_UwrdlNFOCUWro_SdWRTT00DvcGztNX0aTwK8oTx1WTSOA3xfPZkIDyfpeLMj7sJGMRSDaXcV0Z5j1Eef34F97Cq_i4zWqXChE5frfwcKQjQjLz9Yq03GUBa8NvQGpW7Wd1d8M3ARGUXoYdv9KlZZrwu8_6WmPSOc3O4plw9Z-oR82-9nrD6UxesKPGxy7_BMo-Vi1YYamu07uAbZGEftvCQa-GbgUnAg-tQpc9QKr9vxYak5xc6Mm0xtg7bVaZT7a1PqNGoATj2YZXC_mYNOI0lNKvl5wMYFMzSlJDE4KVWkNnxjKM6t3k4pbI8uEj1evUDJQX8Y3ANbJNHLqCtIqB1JghMiAEgnqEYE_cGDqgpPa9TJd3Dx3-Jx9jvmEJS0AKdGRTdudvwvitEtpS3Jdiq3bB7RWskY4Z9ACQ7qnHT7kfTqWVsKrbXooYeifiV5apOE40c2Cu9T7h8zCNohCTg5oEZkQRZXqLosbYz8MCCiwIZy6R8BcSVeg820RoL12xbYmmSIGOlVC4Z72Kz7OHDYdalV3wOfjF82_kxJCvt09iRo4C7vIRFyJBaJiTeKrnwH866v0c4f-Pp185BUnPs1S7XjoiGKQuv7PbiXPxSY.EhVlhE93KoZVVeKYQSZciA/__output__.json","fileType":".json"},{"kernelSessionOutputFileId":0,"kernelSessionId":65706985,"kernelId":17441449,"name":"my_test_output.csv","contentLength":32,"fullPath":"my_test_output.csv","downloadUrl":"https://www.kaggleusercontent.com/kf/65706985/eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..BS4hF2XHKXfw5ILqabTyjQ.mKzVFPJWG0hYkNKVpAsjeyUM955stuLlrxTo7WIS4uNb6501ZXP2zmfIPpndmEfQCWvIihToJM0ai_MoLAejtSKP0ucAWD9J2RF1oiYoCEKU_269GSJJecRoOOG9Xq9-Bpg_FIaciSoYIaLjqU_Lei0Jf0-JesTveFKs1xuIBFQtl9w7zkQmpIDLTiFDmfWX6qnuawxT4uQ9FZOysU1c_KVVu0YsZwRtmFBPCU9iGLFyatcfI7kbXfHduYSR5pljerFoU60_FHqceMpzaLyyhCjTCuNZFc8dXIhFZ0PyxEx9F6F2DPXYXDtScA6S5SdGQe5vdtliBKz4mRE1vOuwRhBPYYJ1Eu_XND4xdx0vHAvoBe0TNjXuHPbAFJMcWFQ-AgFzVB_kYd1nSirw9EnYDKYJMMjYru-alnfSg7a-HnRwWBYMojbv3FyzciLrwMQp949t0mcru5UxHrF95DbVcLjI4MXzDlTHas4PsxB1ehK4xQm4mkJsISSYCsVBtjVNriSeavCUMlyxRoYS6Z-mEnsPXMiI1L3PCN8E8pRdy8Ge_Xbx-jsakSfmXNKhjkuchV0GDjA-fwFxfmbOT1qk03FxQOqoCsFD6GlzYSg5js5AiLHLQjp0MRfNfpt7IdqVSjcpHWvs5Ujm8BYI6ND_Tn8hHVlWBMUcFC7-ZzU2jYU.g34ISjNI97QySyOF0AfQyA/my_test_output.csv","fileType":".csv"}],"ouputFilesOwnerInfo":{"databundleVersionId":0,"dataset":null,"competition":null,"kernel":{"kernelId":17441449,"kernelVersionId":65706985,"scope":"exploredatascience/starter-notebook-guide"},"previewsDisabled":false},"pageMessages":[],"dataSources":[{"sourceType":"Competition","sourceId":27685,"datasetId":null,"databundleVersionId":2229266,"mountSlug":"edsa-movie-recommendation-challenge"}],"renderableDataSources":null,"versions":[{"id":65706985,"isForkParent":false,"isNotebook":true,"languageName":"Python","lastRunTime":"2021-06-14T11:19:36.253Z","linesChangedFromPrevious":0,"linesDeletedFromPrevious":0,"linesInsertedFromPrevious":13,"outputFilesTotalSizeBytes":0,"runInfo":{"dockerfileUrl":"https://github.com/Kaggle/docker-python@sha256:648f97c8be132f304cff3d397339f2d815de79721f3695f43c08a6aec3bc0a5d/blob/master/Dockerfile","dockerHubUrl":"https://registry.hub.docker.com/u/kaggle/python@sha256:648f97c8be132f304cff3d397339f2d815de79721f3695f43c08a6aec3bc0a5d/","dockerImageId":"sha256:8f433497a6531c058852acca2245b7428c12f179d879d8cc92582540784fe442","dockerImageName":"gcr.io/kaggle-images/python@sha256:648f97c8be132f304cff3d397339f2d815de79721f3695f43c08a6aec3bc0a5d","exitCode":0,"failureMessage":null,"isValidStatus":true,"runTimeSeconds":34.2651532,"succeeded":true,"timeoutExceeded":false,"usedAllSpace":false},"status":"complete","title":"Starter Notebook Guide","url":"/exploredatascience/starter-notebook-guide?scriptVersionId=65706985","versionNumber":2,"hasVersionNumber":true,"isRedacted":false,"versionAuthor":null,"versionType":"batch","userPlan":"free"},{"id":64967468,"isForkParent":false,"isNotebook":true,"languageName":"Python","lastRunTime":"2021-06-06T10:06:20.423Z","linesChangedFromPrevious":0,"linesDeletedFromPrevious":0,"linesInsertedFromPrevious":145,"outputFilesTotalSizeBytes":0,"runInfo":{"dockerfileUrl":"https://github.com/Kaggle/docker-python@sha256:648f97c8be132f304cff3d397339f2d815de79721f3695f43c08a6aec3bc0a5d/blob/master/Dockerfile","dockerHubUrl":"https://registry.hub.docker.com/u/kaggle/python@sha256:648f97c8be132f304cff3d397339f2d815de79721f3695f43c08a6aec3bc0a5d/","dockerImageId":"sha256:8f433497a6531c058852acca2245b7428c12f179d879d8cc92582540784fe442","dockerImageName":"gcr.io/kaggle-images/python@sha256:648f97c8be132f304cff3d397339f2d815de79721f3695f43c08a6aec3bc0a5d","exitCode":0,"failureMessage":null,"isValidStatus":true,"runTimeSeconds":40.2503774,"succeeded":true,"timeoutExceeded":false,"usedAllSpace":false},"status":"complete","title":"Starter Notebook Guide","url":"/exploredatascience/starter-notebook-guide?scriptVersionId=64967468","versionNumber":1,"hasVersionNumber":true,"isRedacted":false,"versionAuthor":null,"versionType":"batch","userPlan":"free"}],"categories":{"type":"notebook","tags":[{"id":16611,"name":"pandas","fullPath":"packages \u003e pandas","listingUrl":"/code?sortBy=relevance\u0026group=all\u0026search=tag%3A%27pandas%27","description":"","datasetCount":171,"competitionCount":0,"notebookCount":62999,"tagUrl":"/tags/pandas","displayName":"pandas","fontAwesomeIcon":""},{"id":16607,"name":"matplotlib","fullPath":"packages \u003e matplotlib","listingUrl":"/code?sortBy=relevance\u0026group=all\u0026search=tag%3A%27matplotlib%27","description":"","datasetCount":61,"competitionCount":0,"notebookCount":47155,"tagUrl":"/tags/matplotlib","displayName":"Matplotlib","fontAwesomeIcon":""},{"id":16623,"name":"seaborn","fullPath":"packages \u003e seaborn","listingUrl":"/code?sortBy=relevance\u0026group=all\u0026search=tag%3A%27seaborn%27","description":"","datasetCount":34,"competitionCount":0,"notebookCount":24404,"tagUrl":"/tags/seaborn","displayName":"Seaborn","fontAwesomeIcon":""},{"id":11102,"name":"business","fullPath":"subject \u003e people and society \u003e business","listingUrl":"/code?sortBy=relevance\u0026group=all\u0026search=tag%3A%27business%27","description":"Businesses are organizational entities that drive economic activity. Explore the inner workings of things like HR practices, product sales, and customer happiness in these competitions, kernels, and datasets.","datasetCount":21353,"competitionCount":2,"notebookCount":14497,"tagUrl":"/tags/business","displayName":"Business","fontAwesomeIcon":"briefcase"}]},"downloadAllFilesUrl":"/code/svzip/65706985","submission":null,"menuLinks":[{"count":null,"href":"/exploredatascience/starter-notebook-guide/notebook","reportEventCategory":null,"reportEventType":null,"showZeroCountExplicitly":false,"showOnMobile":true,"tab":"notebook","text":"Notebook","title":"Notebook"},{"count":null,"href":"/exploredatascience/starter-notebook-guide/code","reportEventCategory":null,"reportEventType":null,"showZeroCountExplicitly":false,"showOnMobile":true,"tab":"code","text":"Code","title":"Code"},{"count":1,"href":"/exploredatascience/starter-notebook-guide/data","reportEventCategory":null,"reportEventType":null,"showZeroCountExplicitly":false,"showOnMobile":true,"tab":"data","text":"Input","title":"Input"},{"count":null,"href":"/exploredatascience/starter-notebook-guide/output","reportEventCategory":null,"reportEventType":null,"showZeroCountExplicitly":false,"showOnMobile":false,"tab":"output","text":"Output","title":"Output"},{"count":null,"href":"/exploredatascience/starter-notebook-guide/execution","reportEventCategory":null,"reportEventType":null,"showZeroCountExplicitly":false,"showOnMobile":false,"tab":"execution","text":"Execution Info","title":"Execution Info"},{"count":null,"href":"/exploredatascience/starter-notebook-guide/log","reportEventCategory":null,"reportEventType":null,"showZeroCountExplicitly":false,"showOnMobile":false,"tab":"log","text":"Log","title":"Log"},{"count":0,"href":"/exploredatascience/starter-notebook-guide/comments","reportEventCategory":null,"reportEventType":null,"showZeroCountExplicitly":true,"showOnMobile":true,"tab":"comments","text":"Comments","title":"Comments"}],"rightMenuLinks":[],"callToAction":{"count":null,"href":"/code/fork-version/65706985","reportEventCategory":"kernels","reportEventType":"anonymousKernelForkCreation","showZeroCountExplicitly":false,"showOnMobile":true,"tab":null,"text":"Fork Notebook","title":"Fork Notebook"},"voteButton":{"totalVotes":25,"medalVotes":5,"hasAlreadyVotedUp":false,"hasAlreadyVotedDown":false,"canUpvote":true,"canDownvote":false,"voteUpUrl":null,"voteDownUrl":null,"voters":[{"id":397244,"displayName":"Sabelo Makhanya","email":"","editedEmail":null,"editedEmailCode":null,"userName":"isabelomakhanya","thumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/397244-kg.jpg","profileUrl":"/isabelomakhanya","registerDate":null,"lastVisitDate":null,"statusId":0,"performanceTier":0,"userLogins":[],"groupIds":[],"duplicateUsers":[],"hasPhoneVerifications":false,"failedNerdchas":0,"hasPendingNerdcha":false,"deleteRequests":[],"isAdmin":false,"isKaggleBot":false,"isAnonymous":false,"canAct":false,"canBeSeen":false,"thumbnailName":"","isPhoneVerified":false},{"id":1138586,"displayName":"NDAMULELO","email":"","editedEmail":null,"editedEmailCode":null,"userName":"beluza","thumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/1138586-kg.jpg","profileUrl":"/beluza","registerDate":null,"lastVisitDate":null,"statusId":0,"performanceTier":0,"userLogins":[],"groupIds":[],"duplicateUsers":[],"hasPhoneVerifications":false,"failedNerdchas":0,"hasPendingNerdcha":false,"deleteRequests":[],"isAdmin":false,"isKaggleBot":false,"isAnonymous":false,"canAct":false,"canBeSeen":false,"thumbnailName":"","isPhoneVerified":false},{"id":2205222,"displayName":"Explore Data Science Academy","email":"","editedEmail":null,"editedEmailCode":null,"userName":"exploredatascience","thumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/2205222-kg.png","profileUrl":"/exploredatascience","registerDate":null,"lastVisitDate":null,"statusId":0,"performanceTier":1,"userLogins":[],"groupIds":[],"duplicateUsers":[],"hasPhoneVerifications":false,"failedNerdchas":0,"hasPendingNerdcha":false,"deleteRequests":[],"isAdmin":false,"isKaggleBot":false,"isAnonymous":false,"canAct":false,"canBeSeen":false,"thumbnailName":"","isPhoneVerified":false},{"id":2728708,"displayName":"wisani khosa","email":"","editedEmail":null,"editedEmailCode":null,"userName":"wizro0","thumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/2728708-kg.jpg","profileUrl":"/wizro0","registerDate":null,"lastVisitDate":null,"statusId":0,"performanceTier":1,"userLogins":[],"groupIds":[],"duplicateUsers":[],"hasPhoneVerifications":false,"failedNerdchas":0,"hasPendingNerdcha":false,"deleteRequests":[],"isAdmin":false,"isKaggleBot":false,"isAnonymous":false,"canAct":false,"canBeSeen":false,"thumbnailName":"","isPhoneVerified":false},{"id":4672645,"displayName":"katlego mathole","email":"","editedEmail":null,"editedEmailCode":null,"userName":"katlegomathole","thumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","profileUrl":"/katlegomathole","registerDate":null,"lastVisitDate":null,"statusId":0,"performanceTier":0,"userLogins":[],"groupIds":[],"duplicateUsers":[],"hasPhoneVerifications":false,"failedNerdchas":0,"hasPendingNerdcha":false,"deleteRequests":[],"isAdmin":false,"isKaggleBot":false,"isAnonymous":false,"canAct":false,"canBeSeen":false,"thumbnailName":"","isPhoneVerified":false},{"id":5512597,"displayName":"Albert Steenkamp","email":"","editedEmail":null,"editedEmailCode":null,"userName":"albertsteenkamp","thumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","profileUrl":"/albertsteenkamp","registerDate":null,"lastVisitDate":null,"statusId":0,"performanceTier":0,"userLogins":[],"groupIds":[],"duplicateUsers":[],"hasPhoneVerifications":false,"failedNerdchas":0,"hasPendingNerdcha":false,"deleteRequests":[],"isAdmin":false,"isKaggleBot":false,"isAnonymous":false,"canAct":false,"canBeSeen":false,"thumbnailName":"","isPhoneVerified":false},{"id":5515046,"displayName":"Fahad Mehfooz","email":"","editedEmail":null,"editedEmailCode":null,"userName":"fahadmehfoooz","thumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/5515046-kg.jpg","profileUrl":"/fahadmehfoooz","registerDate":null,"lastVisitDate":null,"statusId":0,"performanceTier":2,"userLogins":[],"groupIds":[],"duplicateUsers":[],"hasPhoneVerifications":false,"failedNerdchas":0,"hasPendingNerdcha":false,"deleteRequests":[],"isAdmin":false,"isKaggleBot":false,"isAnonymous":false,"canAct":false,"canBeSeen":false,"thumbnailName":"","isPhoneVerified":false},{"id":5517944,"displayName":"lerekoqholosha","email":"","editedEmail":null,"editedEmailCode":null,"userName":"lerekoqholosha","thumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/5517944-kg.jpg","profileUrl":"/lerekoqholosha","registerDate":null,"lastVisitDate":null,"statusId":0,"performanceTier":0,"userLogins":[],"groupIds":[],"duplicateUsers":[],"hasPhoneVerifications":false,"failedNerdchas":0,"hasPendingNerdcha":false,"deleteRequests":[],"isAdmin":false,"isKaggleBot":false,"isAnonymous":false,"canAct":false,"canBeSeen":false,"thumbnailName":"","isPhoneVerified":false},{"id":5827050,"displayName":"Yashmita Singh","email":"","editedEmail":null,"editedEmailCode":null,"userName":"ysingh20","thumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/5827050-kg.jpg","profileUrl":"/ysingh20","registerDate":null,"lastVisitDate":null,"statusId":0,"performanceTier":0,"userLogins":[],"groupIds":[],"duplicateUsers":[],"hasPhoneVerifications":false,"failedNerdchas":0,"hasPendingNerdcha":false,"deleteRequests":[],"isAdmin":false,"isKaggleBot":false,"isAnonymous":false,"canAct":false,"canBeSeen":false,"thumbnailName":"","isPhoneVerified":false},{"id":6517334,"displayName":"Noxolo Ngcobo","email":"","editedEmail":null,"editedEmailCode":null,"userName":"noxolongcobo","thumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","profileUrl":"/noxolongcobo","registerDate":null,"lastVisitDate":null,"statusId":0,"performanceTier":0,"userLogins":[],"groupIds":[],"duplicateUsers":[],"hasPhoneVerifications":false,"failedNerdchas":0,"hasPendingNerdcha":false,"deleteRequests":[],"isAdmin":false,"isKaggleBot":false,"isAnonymous":false,"canAct":false,"canBeSeen":false,"thumbnailName":"","isPhoneVerified":false},{"id":6524992,"displayName":"morgan letlhogonolo","email":"","editedEmail":null,"editedEmailCode":null,"userName":"morganletlhogonolo","thumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/6524992-gr.jpg","profileUrl":"/morganletlhogonolo","registerDate":null,"lastVisitDate":null,"statusId":0,"performanceTier":0,"userLogins":[],"groupIds":[],"duplicateUsers":[],"hasPhoneVerifications":false,"failedNerdchas":0,"hasPendingNerdcha":false,"deleteRequests":[],"isAdmin":false,"isKaggleBot":false,"isAnonymous":false,"canAct":false,"canBeSeen":false,"thumbnailName":"","isPhoneVerified":false},{"id":6610250,"displayName":"Jacques Stander","email":"","editedEmail":null,"editedEmailCode":null,"userName":"jacquesstander","thumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/6610250-kg.jpg","profileUrl":"/jacquesstander","registerDate":null,"lastVisitDate":null,"statusId":0,"performanceTier":0,"userLogins":[],"groupIds":[],"duplicateUsers":[],"hasPhoneVerifications":false,"failedNerdchas":0,"hasPendingNerdcha":false,"deleteRequests":[],"isAdmin":false,"isKaggleBot":false,"isAnonymous":false,"canAct":false,"canBeSeen":false,"thumbnailName":"","isPhoneVerified":false},{"id":6672518,"displayName":"Nonkululeko Ntuli","email":"","editedEmail":null,"editedEmailCode":null,"userName":"nonkululeko","thumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","profileUrl":"/nonkululeko","registerDate":null,"lastVisitDate":null,"statusId":0,"performanceTier":0,"userLogins":[],"groupIds":[],"duplicateUsers":[],"hasPhoneVerifications":false,"failedNerdchas":0,"hasPendingNerdcha":false,"deleteRequests":[],"isAdmin":false,"isKaggleBot":false,"isAnonymous":false,"canAct":false,"canBeSeen":false,"thumbnailName":"","isPhoneVerified":false},{"id":7136782,"displayName":"Marc Pinheiro","email":"","editedEmail":null,"editedEmailCode":null,"userName":"marcpinheiro","thumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","profileUrl":"/marcpinheiro","registerDate":null,"lastVisitDate":null,"statusId":0,"performanceTier":0,"userLogins":[],"groupIds":[],"duplicateUsers":[],"hasPhoneVerifications":false,"failedNerdchas":0,"hasPendingNerdcha":false,"deleteRequests":[],"isAdmin":false,"isKaggleBot":false,"isAnonymous":false,"canAct":false,"canBeSeen":false,"thumbnailName":"","isPhoneVerified":false},{"id":7224566,"displayName":"Mahla_Ngobeni","email":"","editedEmail":null,"editedEmailCode":null,"userName":"mahlangobenidatasa","thumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","profileUrl":"/mahlangobenidatasa","registerDate":null,"lastVisitDate":null,"statusId":0,"performanceTier":0,"userLogins":[],"groupIds":[],"duplicateUsers":[],"hasPhoneVerifications":false,"failedNerdchas":0,"hasPendingNerdcha":false,"deleteRequests":[],"isAdmin":false,"isKaggleBot":false,"isAnonymous":false,"canAct":false,"canBeSeen":false,"thumbnailName":"","isPhoneVerified":false},{"id":7322897,"displayName":"Tenielle Perumalswami","email":"","editedEmail":null,"editedEmailCode":null,"userName":"tenielleperumalswami","thumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","profileUrl":"/tenielleperumalswami","registerDate":null,"lastVisitDate":null,"statusId":0,"performanceTier":0,"userLogins":[],"groupIds":[],"duplicateUsers":[],"hasPhoneVerifications":false,"failedNerdchas":0,"hasPendingNerdcha":false,"deleteRequests":[],"isAdmin":false,"isKaggleBot":false,"isAnonymous":false,"canAct":false,"canBeSeen":false,"thumbnailName":"","isPhoneVerified":false},{"id":7323596,"displayName":"RG_DS_2021","email":"","editedEmail":null,"editedEmailCode":null,"userName":"rgds2021","thumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","profileUrl":"/rgds2021","registerDate":null,"lastVisitDate":null,"statusId":0,"performanceTier":0,"userLogins":[],"groupIds":[],"duplicateUsers":[],"hasPhoneVerifications":false,"failedNerdchas":0,"hasPendingNerdcha":false,"deleteRequests":[],"isAdmin":false,"isKaggleBot":false,"isAnonymous":false,"canAct":false,"canBeSeen":false,"thumbnailName":"","isPhoneVerified":false},{"id":7329669,"displayName":"Mukondeleli Negukhula","email":"","editedEmail":null,"editedEmailCode":null,"userName":"mukondelelinegukhula","thumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/7329669-kg.jpg","profileUrl":"/mukondelelinegukhula","registerDate":null,"lastVisitDate":null,"statusId":0,"performanceTier":1,"userLogins":[],"groupIds":[],"duplicateUsers":[],"hasPhoneVerifications":false,"failedNerdchas":0,"hasPendingNerdcha":false,"deleteRequests":[],"isAdmin":false,"isKaggleBot":false,"isAnonymous":false,"canAct":false,"canBeSeen":false,"thumbnailName":"","isPhoneVerified":false},{"id":7337892,"displayName":"Morgan Van der Westhuizen","email":"","editedEmail":null,"editedEmailCode":null,"userName":"morgan0112","thumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/7337892-kg.jpg","profileUrl":"/morgan0112","registerDate":null,"lastVisitDate":null,"statusId":0,"performanceTier":0,"userLogins":[],"groupIds":[],"duplicateUsers":[],"hasPhoneVerifications":false,"failedNerdchas":0,"hasPendingNerdcha":false,"deleteRequests":[],"isAdmin":false,"isKaggleBot":false,"isAnonymous":false,"canAct":false,"canBeSeen":false,"thumbnailName":"","isPhoneVerified":false},{"id":7339257,"displayName":"Heperlot Pontso","email":"","editedEmail":null,"editedEmailCode":null,"userName":"heperlotpontso","thumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","profileUrl":"/heperlotpontso","registerDate":null,"lastVisitDate":null,"statusId":0,"performanceTier":0,"userLogins":[],"groupIds":[],"duplicateUsers":[],"hasPhoneVerifications":false,"failedNerdchas":0,"hasPendingNerdcha":false,"deleteRequests":[],"isAdmin":false,"isKaggleBot":false,"isAnonymous":false,"canAct":false,"canBeSeen":false,"thumbnailName":"","isPhoneVerified":false},{"id":7339974,"displayName":"SifisoN","email":"","editedEmail":null,"editedEmailCode":null,"userName":"sifison","thumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","profileUrl":"/sifison","registerDate":null,"lastVisitDate":null,"statusId":0,"performanceTier":0,"userLogins":[],"groupIds":[],"duplicateUsers":[],"hasPhoneVerifications":false,"failedNerdchas":0,"hasPendingNerdcha":false,"deleteRequests":[],"isAdmin":false,"isKaggleBot":false,"isAnonymous":false,"canAct":false,"canBeSeen":false,"thumbnailName":"","isPhoneVerified":false},{"id":7346899,"displayName":"Sefeni Makgato","email":"","editedEmail":null,"editedEmailCode":null,"userName":"sefenimakgato","thumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","profileUrl":"/sefenimakgato","registerDate":null,"lastVisitDate":null,"statusId":0,"performanceTier":0,"userLogins":[],"groupIds":[],"duplicateUsers":[],"hasPhoneVerifications":false,"failedNerdchas":0,"hasPendingNerdcha":false,"deleteRequests":[],"isAdmin":false,"isKaggleBot":false,"isAnonymous":false,"canAct":false,"canBeSeen":false,"thumbnailName":"","isPhoneVerified":false},{"id":7347139,"displayName":"Innocentia Pakati","email":"","editedEmail":null,"editedEmailCode":null,"userName":"innocentia8630","thumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png","profileUrl":"/innocentia8630","registerDate":null,"lastVisitDate":null,"statusId":0,"performanceTier":0,"userLogins":[],"groupIds":[],"duplicateUsers":[],"hasPhoneVerifications":false,"failedNerdchas":0,"hasPendingNerdcha":false,"deleteRequests":[],"isAdmin":false,"isKaggleBot":false,"isAnonymous":false,"canAct":false,"canBeSeen":false,"thumbnailName":"","isPhoneVerified":false},{"id":7348667,"displayName":"Kone_Makhadi","email":"","editedEmail":null,"editedEmailCode":null,"userName":"konemakhadi","thumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/7348667-kg.jpg","profileUrl":"/konemakhadi","registerDate":null,"lastVisitDate":null,"statusId":0,"performanceTier":1,"userLogins":[],"groupIds":[],"duplicateUsers":[],"hasPhoneVerifications":false,"failedNerdchas":0,"hasPendingNerdcha":false,"deleteRequests":[],"isAdmin":false,"isKaggleBot":false,"isAnonymous":false,"canAct":false,"canBeSeen":false,"thumbnailName":"","isPhoneVerified":false},{"id":7352611,"displayName":"Reneilwe Mphahlele","email":"","editedEmail":null,"editedEmailCode":null,"userName":"reneilwemphahlele","thumbnailUrl":"https://storage.googleapis.com/kaggle-avatars/thumbnails/7352611-kg.jpg","profileUrl":"/reneilwemphahlele","registerDate":null,"lastVisitDate":null,"statusId":0,"performanceTier":0,"userLogins":[],"groupIds":[],"duplicateUsers":[],"hasPhoneVerifications":false,"failedNerdchas":0,"hasPendingNerdcha":false,"deleteRequests":[],"isAdmin":false,"isKaggleBot":false,"isAnonymous":false,"canAct":false,"canBeSeen":false,"thumbnailName":"","isPhoneVerified":false}],"currentUserInfo":null,"showVoters":true,"alwaysShowVoters":true,"kernelId":17441449},"parentName":"EDSA Movie Recommendation Challenge","parentUrl":"/c/edsa-movie-recommendation-challenge","thumbnailImageUrl":"https://storage.googleapis.com/kaggle-competitions/kaggle/27685/logos/thumb76_76.png?t=2021-05-03-12-57-44","canWrite":false,"canAdminister":false,"currentUserForkParentSessionId":null,"currentUserHasForked":false,"forkParentIsRedacted":false,"forkDiffLinesChanged":0,"forkDiffLinesDeleted":0,"forkDiffLinesInserted":0,"forkDiffUrl":null,"forkParentAuthorDisplayName":null,"forkParentAuthorUrl":null,"forkParentTitle":null,"forkParentUrl":null,"simplifiedViewer":false,"kernelOutputDataset":null,"disableComments":true,"taskSubmissionInfo":null,"learnSeriesNavigationData":null,"showSharingControls":true,"showUnchangedCopyWarning":false});performance && performance.mark && performance.mark("KernelViewer.componentCouldBootstrap");</script>

<form action="/exploredatascience/starter-notebook-guide/data?select=movies.csv" id="__AjaxAntiForgeryForm" method="post"><input name="X-XSRF-TOKEN" type="hidden" value="CfDJ8LdUzqlsSWBPr4Ce3rb9VL-dCQRfH0RdowyejnuleKZpgtr-9qhGZ1sTg9EW3b2FJhZBsc7n1EEijT8iKkDNG13T3gCMwdy3dwIeGYUSLcA3BqhKCx_s-UWPe6sauSP7PeRIzW-PeAq9FBzIvzrrUx4" /></form>
<script nonce="eoqD1q22zrBda2D17u9vBg==" type="text/x-mathjax-config">
    MathJax.Hub.Config({
    "HTML-CSS": {
    preferredFont: "TeX",
    availableFonts: ["STIX", "TeX"],
    linebreaks: {
    automatic: true
    },
    EqnChunk: (MathJax.Hub.Browser.isMobile ? 10 : 50)
    },
    tex2jax: {
    inlineMath: [["\\(", "\\)"], ["\\\\(", "\\\\)"]],
    displayMath: [["$$", "$$"], ["\\[", "\\]"]],
    processEscapes: true,
    ignoreClass: "tex2jax_ignore|dno"
    },
    TeX: {
    noUndefined: {
    attributes: {
    mathcolor: "red",
    mathbackground: "#FFEEEE",
    mathsize: "90%"
    }
    }
    },
    Macros: {
    href: "{}"
    },
    skipStartupTypeset: true,
    messageStyle: "none",
    extensions: [],
    });
</script>
<script type="text/javascript" nonce="eoqD1q22zrBda2D17u9vBg==">
  window.addEventListener("DOMContentLoaded", () => {
    const head = document.getElementsByTagName("head")[0];
    const useProdHosts = ["www.kaggle.com", "admin.kaggle.com"];
    const subdomain = useProdHosts.includes(window.location.hostname) ? "www" : "staging";

    const lib = document.createElement("script");
    lib.type = "text/javascript";
    lib.src = `https://${subdomain}.kaggleusercontent.com/static/mathjax/2.7.9/MathJax.js?config=TeX-AMS-MML_HTMLorMML`;
    head.appendChild(lib);
  });
</script>


</div>




  </main>
</body>

</html>
